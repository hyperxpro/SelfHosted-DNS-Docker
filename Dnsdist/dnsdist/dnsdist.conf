addACL('0.0.0.0/0')
addACL('[::]/0')

-- setVerbose(false)

addDOHLocal("0.0.0.0", "/etc/dnsdist/cert.pem", "/etc/dnsdist/private.pem", "/dns-query", {reusePort=true, tcpFastOpenQueueSize=10000, customResponseHeaders={["alt-svc"]="h3=\":443\""}})
addTLSLocal("0.0.0.0", "/etc/dnsdist/cert.pem", "/etc/dnsdist/private.pem", {reusePort=true, tcpFastOpenQueueSize=10000})
addDOH3Local("0.0.0.0", "/etc/dnsdist/cert.pem", "/etc/dnsdist/private.pem", {congestionControlAlgo="bbr"})

addDOHLocal("::", "/etc/dnsdist/cert.pem", "/etc/dnsdist/private.pem", "/dns-query", {reusePort=true, tcpFastOpenQueueSize=10000, customResponseHeaders={["alt-svc"]="h3=\":443\""}})

addAction(MaxQPSIPRule(10000), DropAction())

pc = newPacketCache(10000, {maxTTL=86400})
getPool(""):setCache(pc)

setServerPolicy(leastOutstanding)

-- Here we define our backend, the pihole dns server
newServer({address="172.16.0.3:53", healthCheckMode='lazy', checkInterval=1, lazyHealthCheckFailedInterval=30, rise=2, maxCheckFailures=3, lazyHealthCheckThreshold=30, lazyHealthCheckSampleSize=100,  lazyHealthCheckMinSampleCount=10, lazyHealthCheckMode='TimeoutOnly'})

setMaxTCPConnectionsPerClient(1000)    -- set X(int) for number of tcp connections from a single client. Useful for rate limiting the concurrent connections.
setMaxTCPQueriesPerConnection(10000)    -- set X(int) , similiar to addAction(MaxQPSIPRule(X), DropAction())

